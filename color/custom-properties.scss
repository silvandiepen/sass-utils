@use "sass:map";
@use "sass:math";

//
//    Defaults
//
$prefix: "" !default;
$color-type: "hsla" !default;
$color-shades: false !default;
$color-shade-text: false !default;
$color-props: false !default;
$color-text: false !default;
$colors: () !default;
$default-colors: (
  "dark": #000000,
  "light": #ffffff,
) !default;

$theme-colors: map.merge($colors, $default-colors) !default;
$all-colors: $theme-colors !default;

//
//    Make Variables
//
@function _make-variable($name, $value, $var: "") {
  $_prefix: get-prefix();

  $variable: kebabCase("#{$_prefix}#{$name}");
  $default-var: kebabCase("#{$_prefix}#{$var}");

  @if $var != "" {
    @return "var(--#{$variable}, var(--#{$default-var}, #{$value}))";
  } @else {
    @return "var(--#{$variable},#{$value})";
  }
}

@function _create-variable($name, $value, $var: "") {
  $_prefix: get-prefix();

  $variable: kebabCase("#{$_prefix}#{$name}");
  $default-var: kebabCase("#{$_prefix}#{$var}");

  $var-name: $variable;
  $var-value: "";

  @if $var != "" {
    $var-value: "var(--#{$default-var}, #{$value})";
  } @else {
    $var-value: $value;
  }
  $v: ();
  $v: append($v, $var-name);
  $v: append($v, $var-value);

  @return ($v);

  //   @return (($var-name, $var-value));
}

@mixin create-variable($name, $value, $var: "") {
  $result: _create-variable($name, $value, $var);
  --#{nth($result,1)}: #{nth($result, 2)};
}

@mixin create-variables($variables, $var: "") {
  @each $name, $value in $variables {
    $result: _create-variable($name, $value, $var);
    --#{nth($result,1)}: #{nth($result, 2)};
  }
}

@function is-var($var, $affix: "") {
  @if $var != "" {
    @if $affix != "" {
      @return "#{$var}-#{$affix}";
    }
    @return $var;
  }
  @return $var;
}

//
//    Get Props
//
@function _get-props-hsla($name, $value, $var: "") {
  $v: ();

  $v: append(
    $v,
    _create-variable("#{$name}-h", hue($value), is-var($var, "h"))
  );
  $v: append(
    $v,
    _create-variable("#{$name}-s", saturation($value), is-var($var, "s"))
  );
  $v: append(
    $v,
    _create-variable("#{$name}-l", lightness($value), is-var($var, "l"))
  );
  $v: append(
    $v,
    _create-variable("#{$name}-a", opacity($value), is-var($var, "a"))
  );
  @return $v;
}
@mixin get-props-hsla($name, $value, $var: "") {
  $variables: _get-props-hsla($name, $value, $var);
  @each $v in $variables {
    --#{nth($v,1)}: #{nth($v, 2)};
  }
}
@function _get-props-rgba($name, $value, $var: "") {
  $v: ();

  $v: append(
    $v,
    _create-variable("#{$name}-r", red($value), is-var($var, "h"))
  );
  $v: append(
    $v,
    _create-variable("#{$name}-g", green($value), is-var($var, "s"))
  );
  $v: append(
    $v,
    _create-variable("#{$name}-b", blue($value), is-var($var, "l"))
  );
  $v: append(
    $v,
    _create-variable("#{$name}-a", opacity($value), is-var($var, "a"))
  );
  @return $v;
}
@mixin get-props-rgba($name, $value, $var: "") {
  $variables: _get-props-rgba($name, $value, $var);
  @each $v in $variables {
    --#{nth($v,1)}: #{nth($v, 2)};
  }
}

@function _get-props($name, $value, $var: "") {
  $v: ();
  @if $color-type == "hsla" {
    $v: _get-props-hsla($name, $value, $var);
  } @else if $color-type == "rgba" {
    $v: _get-props-rgba($name, $value, $var);
  }
  @return $v;
}
@mixin get-props($name, $value, $var: "") {
  @if $color-type == "hsla" {
    @include get-props-hsla($name, $value, $var);
  } @else if $color-type == "rgba" {
    @include get-props-rgba($name, $value, $var);
  }
}

//
//    Get Text
//
@function _get-text($name, $value, $dark: black, $light: white) {
  $contrast-color: get-text-color($value);
  $color-value: $dark;
  $v: ();

  @if $contrast-color == "dark" {
    $color-value: $dark;
  } @else {
    $color-value: $light;
  }
  @if $color-props {
    $props: _get-props("#{$name}-text", $color-value, $contrast-color);
    @each $prop in $props {
      $v: append($v, $prop);
    }
  }

  $v: append($v, _get-base("#{$name}-text", $color-value));

  @return $v;
}

@mixin get-text($name, $value, $dark: black, $light: white) {
  $variables: _get-text($name, $value, $dark, $light);

  @each $v in $variables {
    --#{nth($v,1)}: #{nth($v, 2)};
  }
}

//
//   Get Color
//
@function _get-color-hsla($name, $value) {
  @return hsla(
    #{_make-variable("#{$name}-h", hue($value))},
    #{_make-variable("#{$name}-s", saturation($value))},
    #{_make-variable("#{$name}-l", lightness($value))},
    #{_make-variable("#{$name}-a", opacity($value))}
  );
}
@function _get-color-rgba($name, $value) {
  @return rgba(
    #{_make-variable("#{$name}-r", red($value))},
    #{_make-variable("#{$name}-g", green($value))},
    #{_make-variable("#{$name}-b", blue($value))},
    #{_make-variable("#{$name}-a", opacity($value))}
  );
}

@function _get-color($name, $value) {
  @if $color-type == "hsla" {
    @return _get-color-hsla($name, $value);
  } @else if $color-type == "rgba" {
    @return _get-color-rgba($name, $value);
  }
}

//
//    Get Base
//

//    hsla
@function _get-base-hsla($name, $value, $var: "") {
  @return _create-variable($name, _get-color-hsla($name, $value), $var);
}
@mixin get-base-hsla($name, $value, $var: "") {
  @include create-variable($name, _get-color-hsla($name, $value), $var);
}
//   rgba
@function _get-base-rgba($name, $value, $var: "") {
  @return _create-variable($name, _get-color-rgba($name, $value), $var);
}
@mixin get-base-rgba($name, $value, $var: "") {
  @include create-variable($name, _get-color-rgba($name, $value), $var);
}
//    main
@function _get-base($name, $value, $var: "") {
  @if $color-type == "hsla" {
    @return _get-base-hsla($name, $value, $var);
  } @else if $color-type == "rgba" {
    @return _get-base-rgba($name, $value, $var);
  }
}
@mixin get-base($name, $value, $var: "") {
  $v: _get-base($name, $value, $var);
  --#{nth($v,1)}: #{nth($v, 2)};
}

//
//    Get Colors
//
@function _get-colors($colors) {
  $v: ();
  @each $color-name, $color-value in $colors {
    $base: _get-base($color-name, $color-value);
    $v: append($v, $base);
    @if $color-props {
      $props: _get-props($color-name, $color-value);
      @each $prop in $props {
        $v: append($v, $prop);
      }
    }
    @if $color-text {
      $text: _get-text(
        $color-name,
        $color-value,
        map.get($colors, "dark"),
        map.get($colors, "light")
      );

      @each $t in $text {
        $v: append($v, $t);
      }
    }
  }
  @return $v;
}
@mixin get-colors($colors) {
  $_colors: _get-colors($colors);

  @each $_color in $_colors {
    @include create-variable(nth($_color, 1), nth($_color, 2));
  }
}

//
//  Get Shades
//
@function _get-color-shades($colors, $shades: (), $mix: black) {
  $v: ();

  @each $color-name, $color-value in $colors {
    @each $shade in $shades {
      $color-shade: mix(
        $color-value,
        $mix,
        math.percentage(math.div($shade, 100))
      );

      $name: "#{$color-name}-#{$shade}";
      $value: $color-shade;

      // Base
      $base: _get-base($name, $value);
      $v: append($v, $base);

      // Props
      @if $color-props {
        $props: _get-props($name, $value);
        @each $prop in $props {
          $v: append($v, $prop);
        }
      }
      // Text
      @if $color-text {
        $text: _get-text(
          $name,
          $value,
          map.get($colors, "dark"),
          map.get($colors, "light")
        );
        $v: append($v, nth($text, 1));
      }
    }
  }
  @return $v;
}
@mixin get-color-shades($colors, $shades: (), $mix: black) {
  $shades: _get-color-shades($colors, $shades, $mix);

  @each $shade in $shades {
    @include create-variable(nth($shade, 1), nth($shade, 2));
  }
}

//
//  Get Modes
//

$theme-dark: map.get($theme-colors, "dark");
$theme-light: map.get($theme-colors, "light");

$_cache_darkmode: null;
$_cache_lightmode: null;

// @mixin get-mode($mode: "dark", $shades: (), $theme-colors: $theme-colors) {
// }

// @mixin get-darkmode($shades: (), $theme-colors: $theme-colors) {
//   $_mode-colors: ();
//   @if $_cache_darkmode {
//     @debug "use cached darkmode";
//     $_mode-colors: $_cache_darkmode;
//   } @else {
//     @debug "generate darkmode";
//     $theme-colors: map.merge(
//       $theme-colors,
//       (
//         "background": $theme-dark,
//         "foreground": $theme-light,
//       )
//     );

//     @each $_c in _get-colors($theme-colors) {
//       $_mode-colors: append($_mode-colors, $_c);
//     }
//     @if length($shades) > 0 {
//       @each $_c in _get-color-shades($theme-colors, $shades, $theme-dark) {
//         $_mode-colors: append($_mode-colors, $_c);
//       }
//     }
//     $_cache_darkmode: $_mode-colors !global;
//   }
//   @each $_color in $_mode-colors {
//     @include create-variable(nth($_color, 1), nth($_color, 2));
//   }
// }

@function get-mode($mode: "light", $shades: (), $theme-colors: $theme-colors) {
  $_mode-colors: ();
  @if $mode == "light" {
    $theme-colors: map.merge(
      $theme-colors,
      (
        "background": $theme-light,
        "foreground": $theme-dark,
      )
    );
  } @else {
    $theme-colors: map.merge(
      $theme-colors,
      (
        "foreground": $theme-light,
        "background": $theme-dark,
      )
    );
  }
  @each $_c in _get-colors($theme-colors) {
    $_mode-colors: append($_mode-colors, $_c);
  }
  @if length($shades) > 0 {
    @each $_c in _get-color-shades($theme-colors, $shades, $theme-light) {
      $_mode-colors: append($_mode-colors, $_c);
    }
  }

  @return $_mode-colors;
}

@mixin get-lightmode($shades: (), $theme-colors: $theme-colors) {
  $_mode-colors: ();
  @if $_cache_lightmode {
    @debug "use cached lightmode";
    $_mode-colors: $_cache_lightmode;
  } @else {
    @debug "generate lightmode";
    $_mode-colors: get-mode("light", $shades, $theme-colors);
    $_cache_lightmode: $_mode-colors !global;
  }
  @each $_color in $_mode-colors {
    @include create-variable(nth($_color, 1), nth($_color, 2));
  }
}

@mixin get-darkmode($shades: (), $theme-colors: $theme-colors) {
  $_mode-colors: ();
  @if $_cache_darkmode {
    @debug "use cached darkmode";
    $_mode-colors: $_cache_darkmode;
  } @else {
    @debug "generate darkmode";
    $_mode-colors: get-mode("dark", $shades, $theme-colors);
    $_cache_darkmode: $_mode-colors !global;
  }
  @each $_color in $_mode-colors {
    @include create-variable(nth($_color, 1), nth($_color, 2));
  }
}
